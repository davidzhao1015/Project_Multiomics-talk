filter(database %in% c("metaboanalyst", "omicsnet", "paintsomics", "xcms", "workflow", "omicsanalyst", "metabolights")) %>%
group_by(database, Publication.Year) %>%
count(is_multiomics) %>%
ungroup() %>%
pivot_wider(names_from = is_multiomics, values_from = n)
?pivot_wider
merged_df_unique_tag %>%
filter(database %in% c("metaboanalyst", "omicsnet", "paintsomics", "xcms", "workflow", "omicsanalyst", "metabolights")) %>%
group_by(database, Publication.Year) %>%
count(is_multiomics) %>%
ungroup() %>%
pivot_wider(names_from = is_multiomics, values_from = n, values_fill = 0)
merged_df_unique_tag %>%
filter(database %in% c("metaboanalyst", "omicsnet", "paintsomics", "xcms", "workflow", "omicsanalyst", "metabolights")) %>%
group_by(database, Publication.Year) %>%
count(is_multiomics) %>%
ungroup() %>%
pivot_wider(names_from = is_multiomics, values_from = n, values_fill = 0) %>%
mutate(percent_omics = yes/(yes + no))
merged_df_percent_omics <- merged_df_unique_tag %>%
filter(database %in% c("metaboanalyst", "omicsnet", "paintsomics", "xcms", "workflow", "omicsanalyst", "metabolights")) %>%
group_by(database, Publication.Year) %>%
count(is_multiomics) %>%
ungroup() %>%
pivot_wider(names_from = is_multiomics, values_from = n, values_fill = 0) %>%
mutate(percent_omics = yes/(yes + no))
merged_df_percent_omics
merged_df_percent_omics <- merged_df_unique_tag %>%
filter(database %in% c("metaboanalyst", "omicsnet", "paintsomics", "xcms", "workflow", "omicsanalyst", "metabolights")) %>%
group_by(database, Publication.Year) %>%
count(is_multiomics) %>%
ungroup() %>%
pivot_wider(names_from = is_multiomics, values_from = n, values_fill = 0) %>%
mutate(total = yes + no) %>%
mutate(percent_omics = yes/(yes + no))
geom_point()
ggplot(merged_df_percent_omics, aes(x = Publication.Year, y = percent_omics, size = total)) +
geom_point()
ggplot(merged_df_percent_omics, aes(x = Publication.Year, y = percent_omics, size = total, fill = database)) +
geom_point()
ggplot(merged_df_percent_omics, aes(x = Publication.Year, y = percent_omics, size = total, color = database)) +
geom_point()
ggplot(merged_df_percent_omics, aes(x = Publication.Year, y = percent_omics,
size = total * 5, color = database)) +
geom_point()
ggplot(merged_df_percent_omics, aes(x = Publication.Year, y = percent_omics,
size = total * 10, color = database)) +
geom_point()
ggplot(merged_df_percent_omics, aes(x = Publication.Year, y = percent_omics,
size = total, color = database)) +
geom_point()
ggplot(merged_df_percent_omics, aes(x = Publication.Year, y = percent_omics,
size = total, color = database)) +
geom_point(alpha = .5)
ggplot(merged_df_percent_omics, aes(x = Publication.Year, y = percent_omics,
size = total, color = database)) +
geom_point(alpha = .8)
save.image("~/Project_Multiomics-talk/Env-data_Dec15.RData")
stupid_tax_data <- read.csv("~/Project_Wegan/Test_Stupid_Data/test_1e3x10_AllNum_sameNArows_v2-plantnames- tax data.csv/")
stupid_tax_data <- read.csv("~/Project_Wegan/Test_Stupid_Data/test_1e3x10_AllNum_sameNArows_v2-plantnames- tax data.csv", row.names = FALSE)
stupid_tax_data <- read.csv("~/Project_Wegan/Test_Stupid_Data/test_1e3x10_AllNum_sameNArows_v2-plantnames- tax data.csv")
head(stupid_tax_data)
library(tidyverse)
t <- "Declieuxia cacuminis"
gsub("\D.\D", "", t)
gsub("[a-z]\s", "", t)
gsub('[a-z]\s', "", t)
gsub([a-z]\s, "", t)
gsub("[a-z]\s", "", t)
?gsub
gsub("[a-z] ", "", t)
head(stupid_tax_data)
t2 <- gsub("[a-z] ", "", t)
t2 <- gsub("[a-z]", "", t)
t2 <- gsub("[a-z]", "", t, fixed = TRUE)
t2 <- gsub("[a-z] ", "", t, fixed = TRUE)
t2 <- gsub("[a-z] ", "", t)
t2 <- grep("[a-z] ", "", t)
t2 <- grep("[a-z] ", t)
t2 <- grep("[:alpha:][:blank:]", t)
t2 <- gsub("[:alpha:] ", "g", t)
t2 <- gsub("[:alpha:] ", "", t)
t2 <- gsub("[:alpha:]+ ", "", t)
t2 <- gsub("[:alpha:]+ ", "", t)
t2 <- gsub("^[:alpha:]+ ", "", t)
t2 <- gsub("^[:alpha:]+ ", "", t)
t2 <- gsub("[:alpha:]+ ", "", t)
str_sub("[:alpha:]+ ", "", t)
separate(t)
str_sub(t, "^[:alpha:]+ ")
str_split_fixed(t, "")
str_split_fixed(t, " ")
str_split_fixed(t, " ", 1)
str_split(t, " ", 1)
str_split(t, " ", 2)
str_sub(t, "^[:alpha:]+ ")
str_sub(t, 1, 3)
stupid_tax_data %>%
mutate(Species2 = str_split(Species, " ", 2))
stupid_tax_data %>%
mutate(Species2 = str_split(Species, " ", 2)[1])
stupid_tax_data %>%
mutate(Species2 = str_split(Species, " ", 2)[,1])
stupid_tax_data %>%
mutate(Species2 = str_split(Species, " ", 2))
str_split(stupid_tax_data$Species, " ", 2)
tt <- str_split(stupid_tax_data$Species, " ", 2)
tt <- str_split(stupid_tax_data$Species, " ", 2) %>% unlist
tt <- str_split(stupid_tax_data$Species, " ", 2) %>% unlist()
tt
tt <- str_split(stupid_tax_data$Species, " ", 2)
str(tt)
tt[1][2]
tt[1][[2]]
tt[1]
tt[1][1]
tt[1][2]
tt <- str_split(stupid_tax_data$Species, " ", 2) %>% as.matrix()
View(tt)
str_replace(t, "^[:alnum:]+ ", "")
stupid_tax_data %>%
mutate(Species2 = str_replace(Species, "^[:alnum:]+ ", ""))
stupid_tax_data %>%
mutate(Species2 = str_replace(Species, "^[:alnum:]+ ", "")) %>%
select(-Species) %>%
rename(Species = Species2)
stupid_tax_data %>%
mutate(Species2 = str_replace(Species, "^[:alnum:]+ ", "")) %>%
select(-Species) %>%
rename(Species = Species2) %>%
mutate(Species = str_to_title(Species))
stupid_tax_data <- stupid_tax_data %>%
mutate(Species2 = str_replace(Species, "^[:alnum:]+ ", "")) %>%
select(-Species) %>%
rename(Species = Species2) %>%
mutate(Species = str_to_title(Species))
head(stupid_tax_data)
stupid_abund <- read.csv("~/Project_Wegan/Test_Stupid_Data/test_1e3x10_AllNum_sameNArows_v2- plantnames- community data.csv")
head(stupid_abund)
stupid_tax_data %>%
mutate(Species_label = str_replace(Species_label, " [:alnum:]+$", ""))
stupid_tax_data <- stupid_tax_data %>%
mutate(Species_label = str_replace(Species_label, " [:alnum:]+$", ""))
write.csv(stupid_tax_data, "~/Project_Wegan/Test_Stupid_Data/stupid_taxonomy_data.csv", row.names = FALSE)
Rserve::Rserve(args = "--no-save")
library(readr)
ibd_asv_table <- read_csv("NetBeans_PROJECTHOME/wegan/MetaboAnalyst/src/main/webapp/resources/data/ibd_asv_table.csv")
View(ibd_asv_table)
str(ibd_asv_table)
Rserve::Rserve(args = "--no-save")
?vegan::vegdist
?vegan::betadisper
library(tidytext)
library(janeaustenr)
library(corrplot)
library("Hmisc")
library(stringr)
library(wordcloud)
library(RColorBrewer)
library(wordcloud2)
library(tm)
library(tidyr)
library(tidyverse)
library(factoextra)
library(FactoMineR)
library(ggfortify)  # Plot PCA
library(wrangle)
library(fmsb) # Radar chart
library(packcircles)
library("htmlwidgets")
library(webshot)
webshot::install_phantomjs(force = TRUE)
# Set the working directory
setwd("~/Project_Multiomics-talk/")
total_article <- read.csv("./all_articles_multiomics.csv")
multiomics_pmcid <- total_article$PMID
merged_df_unique_tag <- merged_df_unique %>%
mutate(is_multiomics = case_when(PMID %in% multiomics_pmcid ~ "yes",
!(PMID %in% multiomics_pmcid) ~ "no")) %>%
mutate(after_2018 = case_when(Publication.Year >= 2018 ~ "yes",
Publication.Year < 2018 ~ "no"))
file_list <- list.files("./citation_pubmed_files")
# Read in individual csv files
read_file <- function (file_path, file_list_element) {
single_df <- read.csv(file_path)
repeat_n <- nrow(single_df)
db_name <- str_extract(file_list_element, "^[a-z]+")
single_df$database <- rep(db_name, repeat_n)
return(single_df)
}
master_list <- list()
for (j in 1:length(file_list)) {
file_path <- paste0("./citation_pubmed_files/", as.character(file_list[j]))
master_list[[j]] <- read_file(file_path, file_list[j])
}
# Merge all data frames
i <- 2
merged_df <- master_list[[1]]
m <- length(master_list) + 1
while (i < m) {
print(i)
merged_df <- rbind(merged_df, master_list[[i]])
i <- i + 1
}
# Remove duplicate rows
merged_df_unique <- unique(merged_df)
multiomics_pmcid <- total_article$PMID
merged_df_unique_tag <- merged_df_unique %>%
mutate(is_multiomics = case_when(PMID %in% multiomics_pmcid ~ "yes",
!(PMID %in% multiomics_pmcid) ~ "no")) %>%
mutate(after_2018 = case_when(Publication.Year >= 2018 ~ "yes",
Publication.Year < 2018 ~ "no"))
hmdb_drug <- merged_df_unique_tag %>%
filter(database %in% c("human", "drugbank"))
hmdb_drug_omics <- hmdb_drug %>%
select(Title, database, is_multiomics, Publication.Year) %>%
filter(is_multiomics == "yes")
# table(hmdb_drug_omics$database)
hmdb_drug_omics_token <- hmdb_drug_omics %>%
unnest_tokens(word, Title)
hmdb_drug_omics_token <- hmdb_drug_omics_token %>%
anti_join(stop_words)
hmdb_drug_omics_token2 <- hmdb_drug_omics_token %>%
group_by(database) %>%
count(word, sort = TRUE) %>%
mutate(prop = n /sum(n)) %>%
select(-n) %>%
ungroup()
hmdb_drug_omics_token %>%
group_by(database) %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(word, n)) %>%
slice_max(n, n = 15) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
coord_flip() +
facet_wrap(~database, scales = "free")
hmdb_drug_omics_token %>%
group_by(database) %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(word, n)) %>%
slice_max(n, n = 15) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
coord_flip() +
facet_wrap(~database, scales = "free")
hmdb_drug_omics_token %>%
group_by(database) %>%
count(word, sort = TRUE) %>%
slice_max(n, n = 15) %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
coord_flip() +
facet_wrap(~database, scales = "free")
hmdb_drug_omics_token %>%
group_by(database) %>%
count(word, sort = TRUE) %>%
group_by(database) %>%
slice_max(n, n = 15) %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
coord_flip() +
facet_wrap(~database, scales = "free")
hmdb_drug_omics_token
hmdb_drug_omics_token2
hmdb_drug_omics_token2 %>%
group_by(database) %>%
slice_max(n, n = 15) %>%
mutate(word = fct_reorder(word, prop)) %>%
ggplot(aes(x = word, y = prop)) +
geom_col() +
coord_flip() +
facet_wrap(~database, scales = "free")
hmdb_drug_omics_token2 %>%
group_by(database) %>%
slice_max(prop, n = 15) %>%
mutate(word = fct_reorder(word, prop)) %>%
ggplot(aes(x = word, y = prop)) +
geom_col() +
coord_flip() +
facet_wrap(~database, scales = "free")
hmdb_drug_omics_token2 %>%
group_by(database) %>%
slice_max(prop, n = 15) %>%
group_by(database) %>%
mutate(word = fct_reorder(word, prop)) %>%
ggplot(aes(x = word, y = prop)) +
geom_col() +
coord_flip() +
facet_wrap(~database, scales = "free")
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), color = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.0000001), high = "red", low = "gray50") +
theme(legend.position = "none") +
theme_classic()
hmdb_drug_token_wide <- hmdb_drug_omics_token2 %>%
pivot_wider(names_from = database, values_from = prop, values_fill = 0.0001)
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), color = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.0000001), high = "red", low = "gray50") +
theme(legend.position = "none") +
theme_classic()
cor.test(data = hmdb_drug_token_wide, ~ human + drugbank)
hmdb_drug_token_wide <- hmdb_drug_omics_token2 %>%
pivot_wider(names_from = database, values_from = prop, values_fill = 0)
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), color = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.0000001), high = "red", low = "gray50") +
theme(legend.position = "none") +
theme_classic()
hmdb_drug_omics_token2 %>%
group_by(database) %>%
slice_max(prop, n = 15) %>%
mutate(word = fct_reorder(word, prop)) %>%
ggplot(aes(x = word, y = prop)) +
geom_col() +
coord_flip() +
facet_wrap(~database, scales = "free")
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), color = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.0000001), high = "red", low = "gray50") +
theme(legend.position = "none") +
theme_classic()
hmdb_drug_token_wide <- hmdb_drug_omics_token2 %>%
pivot_wider(names_from = database, values_from = prop, values_fill = 0.000001)
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), color = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.0000001), high = "red", low = "gray50") +
theme(legend.position = "none") +
theme_classic()
hmdb_drug_token_wide <- hmdb_drug_omics_token2 %>%
pivot_wider(names_from = database, values_from = prop, values_fill = 0)
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), color = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.0000001), high = "red", low = "gray50") +
theme(legend.position = "none") +
theme_classic()
cor.test(data = hmdb_drug_token_wide, ~ human + drugbank)
human_title_year2 <- hmdb_drug %>%
select(Title, database, is_multiomics) %>%
filter(is_multiomics == "yes")
head(human_title_year2)
human_title_words <- human_title_year2 %>%
unnest_tokens(word, Title) %>%
count(database, word, sort = TRUE)
human_total_words <- human_title_words %>%
group_by(database) %>%
summarize(total = sum(n))
human_title_words <- left_join(human_title_words, human_total_words)
human_title_tf_idf <- human_title_words %>%
bind_tf_idf(word, database, n) %>%
select(-total) %>%
arrange(desc(tf_idf))
human_title_tf_idf %>%
group_by(database) %>%
slice_max(tf_idf, n = 10) %>%
ungroup() %>%
ggplot(aes(tf_idf, fct_reorder(word, tf_idf), fill = database)) +
geom_col(show.legend = FALSE) +
facet_wrap(~database, ncol = 2, scales = "free") +
labs(x = "tf-idf", y = NULL)
hmdb_drug_omics_token2 %>%
group_by(database) %>%
slice_max(prop, n = 15) %>%
ggplot(aes(x = fct_reorder(word, prop), y = prop)) +
geom_col() +
coord_flip() +
facet_wrap(~database, scales = "free")
hmdb_drug_omics_token2 %>%
group_by(database) %>%
slice_max(prop, n = 10) %>%
ggplot(aes(x = fct_reorder(word, prop), y = prop)) +
geom_col() +
coord_flip() +
facet_wrap(~database, scales = "free")
hmdb_drug_omics_token2 %>%
group_by(database) %>%
slice_max(prop, n = 105) %>%
ggplot(aes(x = fct_reorder(word, prop), y = prop)) +
geom_col() +
coord_flip() +
facet_wrap(~database, scales = "free")
hmdb_drug_omics_token2 %>%
group_by(database) %>%
slice_max(prop, n = 15) %>%
ggplot(aes(x = fct_reorder(word, prop), y = prop)) +
geom_col() +
coord_flip() +
facet_wrap(~database, scales = "free")
?cor.test
hmdb_drug_token_wide
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), color = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.0000001), high = "red", low = "gray50") +
theme(legend.position = "none") +
theme_classic()
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), color = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.0000001), high = "grey50", low = "red") +
theme(legend.position = "none") +
theme_classic()
?scale_color_gradient
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), color = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(high = "grey50", low = "red") +
theme(legend.position = "none") +
theme_classic()
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), colour = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(high = "grey50", low = "red") +
theme(legend.position = "none") +
theme_classic()
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), colour = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.001), high = "grey50", low = "red") +
theme(legend.position = "none") +
theme_classic()
hmdb_drug_token_wide <- hmdb_drug_omics_token2 %>%
pivot_wider(names_from = database, values_from = prop, values_fill = NA)
cor.test(data = hmdb_drug_token_wide, ~ human + drugbank)
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), colour = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.001), high = "grey50", low = "red") +
theme(legend.position = "none") +
theme_classic()
hmdb_drug_token_wide <- hmdb_drug_omics_token2 %>%
pivot_wider(names_from = database, values_from = prop, values_fill = 0)
cor.test(data = hmdb_drug_token_wide, ~ human + drugbank)
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), colour = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.001), high = "grey50", low = "red") +
theme(legend.position = "none") +
theme_classic()
hmdb_drug_token_wide <- hmdb_drug_omics_token2 %>%
pivot_wider(names_from = database, values_from = prop, values_fill = 0.00000001)
cor.test(data = hmdb_drug_token_wide, ~ human + drugbank)
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), colour = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.001), high = "grey50", low = "red") +
theme(legend.position = "none") +
theme_classic()
hmdb_drug_token_wide <- hmdb_drug_omics_token2 %>%
pivot_wider(names_from = database, values_from = prop, values_fill = 0)
cor.test(data = hmdb_drug_token_wide, ~ human + drugbank)
ggplot(hmdb_drug_token_wide, aes(x = human, y = drugbank), colour = abs(human - drugbank)) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.001), high = "grey50", low = "red") +
theme(legend.position = "none") +
theme_classic()
save.image("~/Project_Multiomics-talk/Env-data_Dec21.RData")
